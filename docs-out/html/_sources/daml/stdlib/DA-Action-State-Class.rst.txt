.. Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
.. SPDX-License-Identifier: Apache-2.0

.. _module-da-action-state-class-13993:

Module DA.Action.State.Class
============================

DA\.Action\.State\.Class

Typeclasses
-----------

.. _class-da-action-state-class-actionstate-79096:

**class** `ActionState <class-da-action-state-class-actionstate-79096_>`_ s m **where**

  Action ``m`` has a state variable of type ``s``\.
  
  Rules\:
  
  * ``get *> ma  =  ma``
  * ``ma <* get  =  ma``
  * ``put a >>= get   =  put a $> a``
  * ``put a *> put b  =  put b``
  * ``(,) <$> get <*> get  =  get <&> \a -> (a, a)``
  
  Informally, these rules mean it behaves like an ordinary assignable variable\:
  it doesn't magically change value by looking at it, if you put a value there
  that's always the value you'll get if you read it, assigning a value but
  never reading that value has no effect, and so on\.
  
  .. _function-da-action-state-class-get-11786:
  
  `get <function-da-action-state-class-get-11786_>`_
    \: m s
    
    Fetch the current value of the state variable\.
  
  .. _function-da-action-state-class-put-58265:
  
  `put <function-da-action-state-class-put-58265_>`_
    \: s \-\> m ()
    
    Set the value of the state variable\.
  
  .. _function-da-action-state-class-modify-67853:
  
  `modify <function-da-action-state-class-modify-67853_>`_
    \: (s \-\> s) \-\> m ()
    
    Modify the state variable with the given function\.
  
  **default** modify
  
    \: :ref:`Action <class-da-internal-prelude-action-24943>` m \=\> (s \-\> s) \-\> m ()
  
  **instance** `ActionState <class-da-action-state-class-actionstate-79096_>`_ s (:ref:`State <type-da-action-state-state-28299>` s)
