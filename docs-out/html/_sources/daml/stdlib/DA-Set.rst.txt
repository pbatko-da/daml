.. Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
.. SPDX-License-Identifier: Apache-2.0

.. _module-da-set-69043:

Module DA.Set
=============

Note\: This is only supported in DAML\-LF 1\.11 or later\.

This module exports the generic set type ``Set k`` and associated
functions\. This module should be imported qualified, for example\:

.. code-block:: daml

  import DA.Set (Set)
  import DA.Set qualified as S


This will give access to the ``Set`` type, and the various operations
as ``S.lookup``, ``S.insert``, ``S.fromList``, etc\.

``Set k`` internally uses the built\-in order for the type ``k``\.
This means that keys that contain functions are not comparable
and will result in runtime errors\. To prevent this, the ``Ord k``
instance is required for most set operations\. It is recommended to
only use ``Set k`` for key types that have an ``Ord k`` instance
that is derived automatically using ``deriving``\:

.. code-block:: daml

  data K = ...
    deriving (Eq, Ord)


This includes all built\-in types that aren't function types, such as
``Int``, ``Text``, ``Bool``, ``(a, b)`` assuming ``a`` and ``b`` have default
``Ord`` instances, ``Optional t`` and ``[t]`` assuming ``t`` has a
default ``Ord`` instance, ``Map k v`` assuming ``k`` and ``v`` have
default ``Ord`` instances, and ``Set k`` assuming ``k`` has a
default ``Ord`` instance\.

Data Types
----------

.. _type-da-set-types-set-65731:

**data** `Set <type-da-set-types-set-65731_>`_ k

  The type of a set\. This is a wrapper over the ``Map`` type\.
  
  .. _constr-da-set-types-set-51498:
  
  `Set <constr-da-set-types-set-51498_>`_
  
    .. list-table::
       :widths: 15 10 30
       :header-rows: 1
    
       * - Field
         - Type
         - Description
       * - map
         - :ref:`Map <type-da-internal-lf-map-85851>` k ()
         - 
  
  **instance** :ref:`Foldable <class-da-foldable-foldable-61699>` `Set <type-da-set-types-set-65731_>`_
  
  **instance** :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> :ref:`Monoid <class-da-internal-prelude-monoid-13063>` (`Set <type-da-set-types-set-65731_>`_ k)
  
  **instance** :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> :ref:`Semigroup <class-da-internal-prelude-semigroup-80733>` (`Set <type-da-set-types-set-65731_>`_ k)
  
  **instance** :ref:`IsParties <class-da-internal-template-functions-isparties-57119>` (`Set <type-da-set-types-set-65731_>`_ :ref:`Party <type-da-internal-lf-party-50311>`)
  
  **instance** :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> :ref:`Eq <class-ghc-classes-eq-21216>` (`Set <type-da-set-types-set-65731_>`_ k)
  
  **instance** :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> :ref:`Ord <class-ghc-classes-ord-70960>` (`Set <type-da-set-types-set-65731_>`_ k)
  
  **instance** (:ref:`Ord <class-ghc-classes-ord-70960>` k, :ref:`Show <class-ghc-show-show-56447>` k) \=\> :ref:`Show <class-ghc-show-show-56447>` (`Set <type-da-set-types-set-65731_>`_ k)

Functions
---------

.. _function-da-set-empty-95469:

`empty <function-da-set-empty-95469_>`_
  \: `Set <type-da-set-types-set-65731_>`_ k
  
  The empty set\.

.. _function-da-set-size-84204:

`size <function-da-set-size-84204_>`_
  \: `Set <type-da-set-types-set-65731_>`_ k \-\> :ref:`Int <type-ghc-types-int-68728>`
  
  The number of elements in the set\.

.. _function-da-set-tolist-97082:

`toList <function-da-set-tolist-97082_>`_
  \: `Set <type-da-set-types-set-65731_>`_ k \-\> \[k\]
  
  Convert the set to a list of elements\.

.. _function-da-set-fromlist-19623:

`fromList <function-da-set-fromlist-19623_>`_
  \: :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> \[k\] \-\> `Set <type-da-set-types-set-65731_>`_ k
  
  Create a set from a list of elements\.

.. _function-da-set-tomap-73337:

`toMap <function-da-set-tomap-73337_>`_
  \: `Set <type-da-set-types-set-65731_>`_ k \-\> :ref:`Map <type-da-internal-lf-map-85851>` k ()
  
  Convert a ``Set`` into a ``Map``\.

.. _function-da-set-frommap-17542:

`fromMap <function-da-set-frommap-17542_>`_
  \: :ref:`Map <type-da-internal-lf-map-85851>` k () \-\> `Set <type-da-set-types-set-65731_>`_ k
  
  Create a ``Set`` from a ``Map``\.

.. _function-da-set-member-39851:

`member <function-da-set-member-39851_>`_
  \: :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> k \-\> `Set <type-da-set-types-set-65731_>`_ k \-\> :ref:`Bool <type-ghc-types-bool-8654>`
  
  Is the element in the set?

.. _function-da-set-null-33644:

`null <function-da-set-null-33644_>`_
  \: `Set <type-da-set-types-set-65731_>`_ k \-\> :ref:`Bool <type-ghc-types-bool-8654>`
  
  Is this the empty set?

.. _function-da-set-insert-59742:

`insert <function-da-set-insert-59742_>`_
  \: :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> k \-\> `Set <type-da-set-types-set-65731_>`_ k \-\> `Set <type-da-set-types-set-65731_>`_ k
  
  Insert an element in a set\. If the set already contains the
  element, this returns the set unchanged\.

.. _function-da-set-filter-20767:

`filter <function-da-set-filter-20767_>`_
  \: :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> (k \-\> :ref:`Bool <type-ghc-types-bool-8654>`) \-\> `Set <type-da-set-types-set-65731_>`_ k \-\> `Set <type-da-set-types-set-65731_>`_ k
  
  Filter all elements that satisfy the predicate\.

.. _function-da-set-delete-63712:

`delete <function-da-set-delete-63712_>`_
  \: :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> k \-\> `Set <type-da-set-types-set-65731_>`_ k \-\> `Set <type-da-set-types-set-65731_>`_ k
  
  Delete an element from a set\.

.. _function-da-set-singleton-38149:

`singleton <function-da-set-singleton-38149_>`_
  \: :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> k \-\> `Set <type-da-set-types-set-65731_>`_ k
  
  Create a singleton set\.

.. _function-da-set-union-37143:

`union <function-da-set-union-37143_>`_
  \: :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> `Set <type-da-set-types-set-65731_>`_ k \-\> `Set <type-da-set-types-set-65731_>`_ k \-\> `Set <type-da-set-types-set-65731_>`_ k
  
  The union of two sets\.

.. _function-da-set-intersection-91168:

`intersection <function-da-set-intersection-91168_>`_
  \: :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> `Set <type-da-set-types-set-65731_>`_ k \-\> `Set <type-da-set-types-set-65731_>`_ k \-\> `Set <type-da-set-types-set-65731_>`_ k
  
  The intersection of two sets\.

.. _function-da-set-difference-4148:

`difference <function-da-set-difference-4148_>`_
  \: :ref:`Ord <class-ghc-classes-ord-70960>` k \=\> `Set <type-da-set-types-set-65731_>`_ k \-\> `Set <type-da-set-types-set-65731_>`_ k \-\> `Set <type-da-set-types-set-65731_>`_ k
  
  ``difference x y`` returns the set consisting of all
  elements in ``x`` that are not in ``y``\.
  
  > > > fromList \[1, 2, 3\] `difference` fromList \[1, 4\]
  > > > fromList \[2, 3\]
