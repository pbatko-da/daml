.. Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
.. SPDX-License-Identifier: Apache-2.0

.. _module-da-logic-19931:

Module DA.Logic
===============

Logic \- Propositional calculus\.

Data Types
----------

.. _type-da-logic-types-formula-86297:

**data** `Formula <type-da-logic-types-formula-86297_>`_ t

  A ``Formula t`` is a formula in propositional calculus with
  propositions of type t\.
  
  .. _constr-da-logic-types-proposition-50786:
  
  `Proposition <constr-da-logic-types-proposition-50786_>`_ t
  
    ``Proposition p`` is the formula p
  
  .. _constr-da-logic-types-negation-80936:
  
  `Negation <constr-da-logic-types-negation-80936_>`_ (`Formula <type-da-logic-types-formula-86297_>`_ t)
  
    For a formula f, ``Negation f`` is ¬f
  
  .. _constr-da-logic-types-conjunction-37534:
  
  `Conjunction <constr-da-logic-types-conjunction-37534_>`_ \[`Formula <type-da-logic-types-formula-86297_>`_ t\]
  
    For formulas f1, \.\.\., fn, ``Conjunction [f1, ..., fn]`` is f1 ∧ \.\.\. ∧ fn
  
  .. _constr-da-logic-types-disjunction-45642:
  
  `Disjunction <constr-da-logic-types-disjunction-45642_>`_ \[`Formula <type-da-logic-types-formula-86297_>`_ t\]
  
    For formulas f1, \.\.\., fn, ``Disjunction [f1, ..., fn]`` is f1 ∨ \.\.\. ∨ fn
  
  **instance** :ref:`Action <class-da-internal-prelude-action-24943>` `Formula <type-da-logic-types-formula-86297_>`_
  
  **instance** :ref:`Applicative <class-da-internal-prelude-applicative-43914>` `Formula <type-da-logic-types-formula-86297_>`_
  
  **instance** :ref:`Functor <class-ghc-base-functor-73448>` `Formula <type-da-logic-types-formula-86297_>`_
  
  **instance** :ref:`Eq <class-ghc-classes-eq-21216>` t \=\> :ref:`Eq <class-ghc-classes-eq-21216>` (`Formula <type-da-logic-types-formula-86297_>`_ t)
  
  **instance** :ref:`Ord <class-ghc-classes-ord-70960>` t \=\> :ref:`Ord <class-ghc-classes-ord-70960>` (`Formula <type-da-logic-types-formula-86297_>`_ t)
  
  **instance** :ref:`Show <class-ghc-show-show-56447>` t \=\> :ref:`Show <class-ghc-show-show-56447>` (`Formula <type-da-logic-types-formula-86297_>`_ t)

Functions
---------

.. _function-da-logic-ampampamp-7602:

`(&&&) <function-da-logic-ampampamp-7602_>`_
  \: `Formula <type-da-logic-types-formula-86297_>`_ t \-\> `Formula <type-da-logic-types-formula-86297_>`_ t \-\> `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``&&&`` is the ∧ operation of the boolean algebra of formulas, to
  be read as \"and\"

.. _function-da-logic-pipepipepipe-87524:

`(|||) <function-da-logic-pipepipepipe-87524_>`_
  \: `Formula <type-da-logic-types-formula-86297_>`_ t \-\> `Formula <type-da-logic-types-formula-86297_>`_ t \-\> `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``|||`` is the ∨ operation of the boolean algebra of formulas, to
  be read as \"or\"

.. _function-da-logic-true-11599:

`true <function-da-logic-true-11599_>`_
  \: `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``true`` is the 1 element of the boolean algebra of formulas,
  represented as an empty conjunction\.

.. _function-da-logic-false-78315:

`false <function-da-logic-false-78315_>`_
  \: `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``false`` is the 0 element of the boolean algebra of formulas,
  represented as an empty disjunction\.

.. _function-da-logic-neg-77490:

`neg <function-da-logic-neg-77490_>`_
  \: `Formula <type-da-logic-types-formula-86297_>`_ t \-\> `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``neg`` is the ¬ (negation) operation of the boolean algebra of
  formulas\.

.. _function-da-logic-conj-3097:

`conj <function-da-logic-conj-3097_>`_
  \: \[`Formula <type-da-logic-types-formula-86297_>`_ t\] \-\> `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``conj`` is a list version of ``&&&``, enabled by the associativity
  of ∧\.

.. _function-da-logic-disj-83797:

`disj <function-da-logic-disj-83797_>`_
  \: \[`Formula <type-da-logic-types-formula-86297_>`_ t\] \-\> `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``disj`` is a list version of ``|||``, enabled by the associativity
  of ∨\.

.. _function-da-logic-frombool-6987:

`fromBool <function-da-logic-frombool-6987_>`_
  \: :ref:`Bool <type-ghc-types-bool-8654>` \-\> `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``fromBool`` converts ``True`` to ``true`` and ``False`` to ``false``\.

.. _function-da-logic-tonnf-14777:

`toNNF <function-da-logic-tonnf-14777_>`_
  \: `Formula <type-da-logic-types-formula-86297_>`_ t \-\> `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``toNNF`` transforms a formula to negation normal form
  (see https\://en\.wikipedia\.org/wiki/Negation\_normal\_form)\.

.. _function-da-logic-todnf-63207:

`toDNF <function-da-logic-todnf-63207_>`_
  \: `Formula <type-da-logic-types-formula-86297_>`_ t \-\> `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``toDNF`` turns a formula into disjunctive normal form\.
  (see https\://en\.wikipedia\.org/wiki/Disjunctive\_normal\_form)\.

.. _function-da-logic-traverse-99205:

`traverse <function-da-logic-traverse-99205_>`_
  \: :ref:`Applicative <class-da-internal-prelude-applicative-43914>` f \=\> (t \-\> f s) \-\> `Formula <type-da-logic-types-formula-86297_>`_ t \-\> f (`Formula <type-da-logic-types-formula-86297_>`_ s)
  
  An implementation of ``traverse`` in the usual sense\.

.. _function-da-logic-zipformulas-7664:

`zipFormulas <function-da-logic-zipformulas-7664_>`_
  \: `Formula <type-da-logic-types-formula-86297_>`_ t \-\> `Formula <type-da-logic-types-formula-86297_>`_ s \-\> `Formula <type-da-logic-types-formula-86297_>`_ (t, s)
  
  ``zipFormulas`` takes to formulas of same shape, meaning only
  propositions are different and zips them up\.

.. _function-da-logic-substitute-90317:

`substitute <function-da-logic-substitute-90317_>`_
  \: (t \-\> :ref:`Optional <type-da-internal-prelude-optional-79838>` :ref:`Bool <type-ghc-types-bool-8654>`) \-\> `Formula <type-da-logic-types-formula-86297_>`_ t \-\> `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``substitute`` takes a truth assignment and substitutes ``True`` or
  ``False`` into the respective places in a formula\.

.. _function-da-logic-reduce-53543:

`reduce <function-da-logic-reduce-53543_>`_
  \: `Formula <type-da-logic-types-formula-86297_>`_ t \-\> `Formula <type-da-logic-types-formula-86297_>`_ t
  
  ``reduce`` reduces a formula as far as possible by\:
  
  1. Removing any occurrences of ``true`` and ``false``;
  2. Removing directly nested Conjunctions and Disjunctions;
  3. Going to negation normal form\.

.. _function-da-logic-isbool-65229:

`isBool <function-da-logic-isbool-65229_>`_
  \: `Formula <type-da-logic-types-formula-86297_>`_ t \-\> :ref:`Optional <type-da-internal-prelude-optional-79838>` :ref:`Bool <type-ghc-types-bool-8654>`
  
  ``isBool`` attempts to convert a formula to a bool\. It satisfies
  ``isBool true == Right True`` and ``toBool false == Right False``\.
  Otherwise, it returns ``Left x``, where ``x`` is the input\.

.. _function-da-logic-interpret-38709:

`interpret <function-da-logic-interpret-38709_>`_
  \: (t \-\> :ref:`Optional <type-da-internal-prelude-optional-79838>` :ref:`Bool <type-ghc-types-bool-8654>`) \-\> `Formula <type-da-logic-types-formula-86297_>`_ t \-\> :ref:`Either <type-da-types-either-20245>` (`Formula <type-da-logic-types-formula-86297_>`_ t) :ref:`Bool <type-ghc-types-bool-8654>`
  
  ``interpret`` is a version of ``toBool`` that first substitutes using
  a truth function and then reduces as far as possible\.

.. _function-da-logic-substitutea-70133:

`substituteA <function-da-logic-substitutea-70133_>`_
  \: :ref:`Applicative <class-da-internal-prelude-applicative-43914>` f \=\> (t \-\> f (:ref:`Optional <type-da-internal-prelude-optional-79838>` :ref:`Bool <type-ghc-types-bool-8654>`)) \-\> `Formula <type-da-logic-types-formula-86297_>`_ t \-\> f (`Formula <type-da-logic-types-formula-86297_>`_ t)
  
  ``substituteA`` is a version of ``substitute`` that allows for truth
  values to be obtained from an action\.

.. _function-da-logic-interpreta-63237:

`interpretA <function-da-logic-interpreta-63237_>`_
  \: :ref:`Applicative <class-da-internal-prelude-applicative-43914>` f \=\> (t \-\> f (:ref:`Optional <type-da-internal-prelude-optional-79838>` :ref:`Bool <type-ghc-types-bool-8654>`)) \-\> `Formula <type-da-logic-types-formula-86297_>`_ t \-\> f (:ref:`Either <type-da-types-either-20245>` (`Formula <type-da-logic-types-formula-86297_>`_ t) :ref:`Bool <type-ghc-types-bool-8654>`)
  
  ``interpretA`` is a version of ``interpret`` that allows for truth
  values to be obtained form an action\.
